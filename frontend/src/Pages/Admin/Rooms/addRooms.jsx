import React, { useState, useEffect } from "react";
import { Container, Form, Button, Row, Col, Spinner, Alert } from "react-bootstrap";
import { createRoom, getAllRooms } from "../../../services/roomsAdmin";
import { getAllLocationTypes } from "../../../services/locationTypes";
import { useNavigate } from "react-router-dom";
import "./add.css";

function AddRooms() {
    const navigate = useNavigate();
    const [form, setForm] = useState({
        name: "",
        description: "",
        capacity: "",
        price: "",
        // table_money: "null",   // üëà th√™m v√†o
        status: "1", 
        image: null,
        location_type_id: "",
    });

    const [locationTypes, setLocationTypes] = useState([]);
    const [rooms, setRooms] = useState([]);
    const [loadingLocationTypes, setLoadingLocationTypes] = useState(true);
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState(null);
    const [submitSuccess, setSubmitSuccess] = useState(false);
    const [imagePreview, setImagePreview] = useState(null);
    const [formErrors, setFormErrors] = useState({});

    useEffect(() => {
        loadLocationTypes();
        loadRooms();
    }, []);

    const loadLocationTypes = async () => {
        try {
            const data = await getAllLocationTypes();
            setLocationTypes(data);
        } catch {
            setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch lo·∫°i ƒë·ªãa ƒëi·ªÉm.");
        } finally {
            setLoadingLocationTypes(false);
        }
    };

    const loadRooms = async () => {
        try {
            const data = await getAllRooms();
            setRooms(data);
        } catch (err) {
            console.error(err);
        }
    };

    const handleChange = (e) => {
        const { name, value, files } = e.target;
        if (name === "image" && files && files[0]) {
            setForm({ ...form, image: files[0] });
            setImagePreview(URL.createObjectURL(files[0]));
        } else {
            setForm({ ...form, [name]: value });
        }
    };

    const validateForm = () => {
        let errors = {};
        const namePattern = /^[a-zA-Z0-9√Ä-·ªπ\s]+$/u;
        const imagePattern = /\.(jpg|jpeg|png|gif)$/i;

        if (!form.name.trim()) errors.name = "Vui l√≤ng nh·∫≠p t√™n ph√≤ng.";
        else if (/^\s/.test(form.name)) errors.name = "T√™n ph√≤ng kh√¥ng ƒë∆∞·ª£c c√≥ kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu.";
        else if (!namePattern.test(form.name)) errors.name = "T√™n ph√≤ng kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát.";
        else if (rooms.some(r => r.name.toLowerCase() === form.name.trim().toLowerCase())) errors.name = "T√™n ph√≤ng ƒë√£ t·ªìn t·∫°i.";

        if (!form.description.trim()) errors.description = "Vui l√≤ng nh·∫≠p m√¥ t·∫£.";
        if (!form.capacity || form.capacity <= 0) errors.capacity = "S·ª©c ch·ª©a ph·∫£i l·ªõn h∆°n 0.";
        if (!form.price || form.price < 0) errors.price = "Gi√° ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0.";

        // üëá validate table_money
        // if (!form.table_money || form.table_money < 0) errors.table_money = "Ti·ªÅn b√†n ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0.";

        if (!form.location_type_id) errors.location_type_id = "Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng.";

        if (!form.image) errors.image = "Vui l√≤ng ch·ªçn ·∫£nh.";
        else if (!imagePattern.test(form.image.name)) errors.image = "Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh JPG, JPEG, PNG, GIF.";
        else if (form.image.size > 2 * 1024 * 1024) errors.image = "Dung l∆∞·ª£ng ·∫£nh kh√¥ng v∆∞·ª£t qu√° 2MB.";

        setFormErrors(errors);
        return Object.keys(errors).length === 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setSubmitting(true);
        setError(null);
        setSubmitSuccess(false);

        if (!validateForm()) {
            setSubmitting(false);
            return;
        }

        try {
            const formData = new FormData();
            Object.entries(form).forEach(([key, value]) => {
                if (value !== null) formData.append(key, value);
            });

            await createRoom(formData);
            setSubmitSuccess(true);
            setTimeout(() => navigate("/admin/rooms"), 1500);
        } catch {
            setError("C√≥ l·ªói x·∫£y ra khi th√™m ph√≤ng.");
        } finally {
            setSubmitting(false);
        }
    };

    return (
        <Container className="my-5 py-4">
            <h2 className="text-center mb-4 text-primary fw-bold">Th√™m Ph√≤ng M·ªõi</h2>
            <Row className="justify-content-center">
                <Col md={6}>
                    <Form onSubmit={handleSubmit} className="p-4 shadow rounded bg-white">
                        {submitSuccess && <Alert variant="success">Th√™m ph√≤ng th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...</Alert>}
                        {error && <Alert variant="danger">{error}</Alert>}

                        {/* T√™n ph√≤ng */}
                        <Form.Group className="mb-3">
                            <Form.Label>T√™n ph√≤ng</Form.Label>
                            <Form.Control
                                type="text"
                                name="name"
                                value={form.name}
                                onChange={handleChange}
                                isInvalid={!!formErrors.name}
                            />
                            <Form.Control.Feedback type="invalid">{formErrors.name}</Form.Control.Feedback>
                        </Form.Group>

                        {/* M√¥ t·∫£ */}
                        <Form.Group className="mb-3">
                            <Form.Label>M√¥ t·∫£</Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={3}
                                name="description"
                                value={form.description}
                                onChange={handleChange}
                                isInvalid={!!formErrors.description}
                            />
                            <Form.Control.Feedback type="invalid">{formErrors.description}</Form.Control.Feedback>
                        </Form.Group>

                        {/* S·ª©c ch·ª©a */}
                        <Form.Group className="mb-3">
                            <Form.Label>S·ª©c ch·ª©a</Form.Label>
                            <Form.Control
                                type="number"
                                name="capacity"
                                value={form.capacity}
                                onChange={handleChange}
                                isInvalid={!!formErrors.capacity}
                            />
                            <Form.Control.Feedback type="invalid">{formErrors.capacity}</Form.Control.Feedback>
                        </Form.Group>

                        {/* Gi√° ph√≤ng */}
                        <Form.Group className="mb-3">
                            <Form.Label>Gi√° ph√≤ng</Form.Label>
                            <Form.Control
                                type="number"
                                name="price"
                                value={form.price}
                                onChange={handleChange}
                                isInvalid={!!formErrors.price}
                            />
                            <Form.Control.Feedback type="invalid">{formErrors.price}</Form.Control.Feedback>
                        </Form.Group>

                        {/* Ti·ªÅn b√†n üëà th√™m v√†o */}
                        {/* <Form.Group className="mb-3">
                            <Form.Label>Ti·ªÅn b√†n</Form.Label>
                            <Form.Control
                                type="number"
                                name="table_money"
                                value={form.table_money}
                                onChange={handleChange}
                                isInvalid={!!formErrors.table_money}
                            />
                            <Form.Control.Feedback type="invalid">{formErrors.table_money}</Form.Control.Feedback>
                        </Form.Group> */}

                        {/* Lo·∫°i ph√≤ng */}
                        <Form.Group className="mb-3">
                            <Form.Label>Lo·∫°i ph√≤ng</Form.Label>
                            {loadingLocationTypes ? (
                                <Spinner animation="border" size="sm" />
                            ) : (
                                <Form.Select
                                    name="location_type_id"
                                    value={form.location_type_id}
                                    onChange={handleChange}
                                    isInvalid={!!formErrors.location_type_id}
                                >
                                    <option value="">-- Ch·ªçn lo·∫°i ph√≤ng --</option>
                                    {locationTypes.map((type) => (
                                        <option key={type.id} value={type.id}>
                                            {type.name}
                                        </option>
                                    ))}
                                </Form.Select>
                            )}
                            <Form.Control.Feedback type="invalid">{formErrors.location_type_id}</Form.Control.Feedback>
                        </Form.Group>

                        {/* Tr·∫°ng th√°i */}
                        <Form.Group className="mb-3">
                            <Form.Label>Tr·∫°ng th√°i</Form.Label>
                            <Form.Select name="status" value={form.status} onChange={handleChange}>
                                <option value="1">Ho·∫°t ƒë·ªông</option>
                                <option value="0">B·∫£o tr√¨</option>
                            </Form.Select>
                        </Form.Group>

                        {/* ·∫¢nh */}
                        <Form.Group className="mb-3">
                            <Form.Label>·∫¢nh ph√≤ng</Form.Label>
                            <Form.Control
                                type="file"
                                name="image"
                                onChange={handleChange}
                                accept="image/*"
                                isInvalid={!!formErrors.image}
                            />
                            <Form.Control.Feedback type="invalid">{formErrors.image}</Form.Control.Feedback>
                            {imagePreview && (
                                <div className="mt-3 text-center">
                                    <img src={imagePreview} alt="Preview" className="img-thumbnail" style={{ maxHeight: "200px" }} />
                                </div>
                            )}
                        </Form.Group>

                        <div className="d-flex justify-content-center gap-3">
                            <Button type="submit" variant="primary" disabled={submitting}>
                                {submitting ? "ƒêang th√™m..." : "Th√™m ph√≤ng"}
                            </Button>
                            <Button variant="secondary" onClick={() => navigate("/admin/rooms")} disabled={submitting}>
                                Quay l·∫°i
                            </Button>
                        </div>
                    </Form>
                </Col>
            </Row>
        </Container>
    );
}

export default AddRooms;
